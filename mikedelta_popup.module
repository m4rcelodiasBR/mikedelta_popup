<?php

/**
 * @file
 * Funções principais e hooks para o módulo MikeDelta Popup.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implementa hook_help().
 */
function mikedelta_popup_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.mikedelta_popup':
      $output = '<h3>' . t('Sobre o Módulo MikeDelta Popup') . '</h3>';
      $output .= '<p>' . t('Este módulo permite a criação de um pop-up customizável para ser exibido exclusivamente na página inicial do site. O pop-up pode conter texto formatado ou uma galeria de pop-ups rotativas.') . '</p>';

      $output .= '<h3>' . t('Principais Funcionalidades') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('<strong>Controle de Ativação:</strong> Permite habilitar/desabilitar o pop-up globalmente e definir um período de exibição com data de início e fim.') . '</li>';
      $output .= '<li>' . t('<strong>Exibição Exclusiva:</strong> O pop-up é configurado para aparecer apenas na página inicial do site.') . '</li>';
      $output .= '<li>' . t('<strong>Dois Tipos de Popup:</strong> Suporta pop-ups de texto (usando o editor do Drupal) ou de imagem.') . '</li>';
      $output .= '<li>' . t('<strong>Galeria de Popups Rotativa:</strong> Permite o cadastro de até 10 imagens. A cada nova sessão de um visitante, uma imagem diferente da galeria é exibida, em ciclo.') . '</li>';
      $output .= '<li>' . t('<strong>Links Individuais:</strong> Cada imagem cadastrada na galeria pode ter seu próprio link de destino e definir se ele abre em uma nova janela.') . '</li>';
      $output .= '</ul>';

      $output .= '<h3>' . t('Como Configurar') . '</h3>';
      $settings_url = Url::fromRoute('mikedelta_popup.settings_form')->toString();
      $output .= '<p>' . t('Todas as configurações podem ser feitas na <a href=":url">página de configuração do módulo</a>.', [':url' => $settings_url]) . '</p>';
      $output .= '<ol>';
      $output .= '<li>' . t('<strong>Ative o pop-up:</strong> Marque a caixa "Ativar o popup no site" e, se desejar, defina as datas de início e fim.') . '</li>';
      $output .= '<li>' . t('<strong>Escolha o tipo:</strong> Selecione "Tipo Texto" ou "Tipo Imagem".') . '</li>';
      $output .= '<li>' . t('<strong>Se for Tipo Imagem:</strong> No painel "Imagens da Galeria", preencha os "slots" desejados. Para cada imagem, faça o upload do arquivo e, opcionalmente, insira a URL de destino e como ela deve abrir. Cada slot corresponde a um popup dentro do ciclo de rotação.') . '</li>';
      $output .= '<li>' . t('<strong>Se for Tipo Texto:</strong> Utilize o editor de texto para criar o conteúdo do seu pop-up.') . '</li>';
      $output .= '<li>' . t('<strong>Salve as configurações.</strong>') . '</li>';
      $output .= '<li>' . t('<strong>Limpe todos os caches do sistema.</strong>') . '</li>';
      $output .= '</ol>';

      $output .= '<h3>' . t('Observações') . '</h3>';
      $output .= '<h4>' . t('Rotação de Imagens') . '</h4>';
      $output .= '<p>' . t('A rotação é baseada na sessão do usuário. Isso significa que, para testar a troca de imagens, você precisa simular novas visitas. A melhor forma de fazer isso é acessando o site em uma janela anônima, fechando-a completamente e abrindo uma nova janela anônima para a visita seguinte.') . '</p>';

      $files_url = Url::fromRoute('view.files.page_1')->toString();
      $output .= '<h4>' . t('Arquivos no servidor') . '</h4>';
      $output .= '<p>' . t('Os arquivos de imagens são organizados no servidor dentro da pasta /sites/default/files/mikedelta_popup/data-postagem') . '</p>';
      $output .= '<p>' . t('<strong>IMPORTANTE: </strong>Não delete diretamente o arquivo do servidor sem antes excluir o popup no módulo. Poderá acarretar problemas de apontamentos dentro do sistema Drupal. Exclua os arquivos pelo gerenciador de arquivos do Drupal para maior segurança através deste link: <a href=":url">Arquivos do Drupal</a>.', [':url' => $files_url]) . '</p>';

      return $output;

    // Ajuda contextual na própria página de configuração
    case 'mikedelta_popup.settings_form':
      return '<p>' . t('Use este formulário para configurar o pop-up que aparecerá na página inicial do seu site.') . '</p>';
  }
}

/**
 * Implements hook_page_attachments().
 *
 * Anexa os assets (CSS/JS) e as configurações do pop-up à página.
 * A lógica de exibição (verificação de data, rotação, etc.) é executada aqui.
 *
 * @param array $page
 * A render array da página, passada por referência.
 */
function mikedelta_popup_page_attachments(array &$page) {

  if (isset($page['#attached']['drupalSettings']['mikedelta_popup'])) {
    return;
  }

  $path_matcher = \Drupal::service('path.matcher');
  if (!$path_matcher->isFrontPage()) {
    return; // Se não for a página inicial, para a execução aqui.
  }

  $config = \Drupal::config('mikedelta_popup.settings');

  if (!$config->get('popup_enabled')) { return; }
  $start_date_str = $config->get('activation_start_date');
  $end_date_str = $config->get('activation_end_date');
  $now = new \DateTime('now', new \DateTimeZone('America/Sao_Paulo')); // Usa o fuso horário correto
  if (!empty($start_date_str)) {
    $start_date = new \DateTime($start_date_str);
    if ($now < $start_date) { return; }
  }
  if (!empty($end_date_str)) {
    $end_date = new \DateTime($end_date_str);
    $end_date->modify('+1 day');
    if ($now > $end_date) { return; }
  }

  $popup_type = $config->get('popup_type');
  $image_to_display = NULL;

  if ($popup_type == 'image') {
    $gallery_items = $config->get('gallery_items');

    if (!empty($gallery_items)) {
      $session = \Drupal::request()->getSession();
      $last_index = $session->get('mikedelta_popup_last_index', -1);
      $next_index = ($last_index + 1) % count($gallery_items);
      $session->set('mikedelta_popup_last_index', $next_index);
      $image_to_display = $gallery_items[$next_index];
    }
  }

  $image_url = '';
  $link_url_string = '';
  $link_target = '_self';

  if ($image_to_display) {
    if (isset($image_to_display['image_source_type']) && $image_to_display['image_source_type'] === 'external') {
        $image_url = $image_to_display['image_external_url'] ?? '';
    }
    else {
        $file = \Drupal\file\Entity\File::load($image_to_display['image_fid']);
        if ($file) {
            $image_url = $file->createFileUrl();
        }
    }

    $link_url_string = $image_to_display['link_url'] ?? '';
    $link_target = $image_to_display['link_target'] ?? '_self';
  }
  
  $final_link_url = '';
  if (!empty($link_url_string)) {
    if (str_starts_with($link_url_string, 'http://') || str_starts_with($link_url_string, 'https://')) {
      $final_link_url = $link_url_string;
    }
    else {
      try {
        $final_link_url = \Drupal\Core\Url::fromUserInput($link_url_string)->toString();
      } catch (\InvalidArgumentException $e) {
        \Drupal::logger('mikedelta_popup')->warning('O caminho interno para o item da galeria é inválido: @path', ['@path' => $link_url_string]);
        $final_link_url = '#';
      }
    }
  }
  
  $build = ['#type' => 'processed_text', '#text' => $config->get('popup_text.value'), '#format' => $config->get('popup_text.format')];
  $rendered_text = \Drupal::service('renderer')->render($build);

  $page['#cache']['contexts'][] = 'session';
  $page['#attached']['library'][] = 'mikedelta_popup/md-assets';
  $page['#attached']['drupalSettings']['mikedelta_popup'] = [
    'type' => $popup_type,
    'text' => (string) $rendered_text,
    'imageUrl' => $image_url,
    'linkUrl' => $final_link_url,
    'linkTarget' => $link_target,
  ];
}